-module(protocol).

-unitbase(protocol) -> Methods = [].

global PROTOCOLS = bts:new().

contains(L, E) -> contains(L, E, 0).
contains(L, E, I) when lists:nth(L, I) == E -> true.
contains(L, E, I) when lists:nth(L, I) == end_of_list -> false.
contains(L, E, I) -> contains(L, E, I + 1).

rude_contains(L, E) when bts:member(L, E) == true -> ok.
rude_contains(L, E) -> barley:throw("ProtocolError: method '" + E + "' doesn't exists").

extern protocols() -> "" + bts:tab_to_list(PROTOCOLS).

prepare() -> barley:reparse("pkgs/unit_constructor/unit_constructor.barley").

protocol(MS) -> unit_constructor:new(protocol, "Methods = " + MS).

add_method(P, M) ->
    unit:set(P, "Methods", unit:get(P, "Methods") + [M]).

register(N, P) -> bts:insert(PROTOCOLS, N, P).

deprecate(N) -> bts:remove(PROTOCOLS, N).

secure(N) ->
    MethodsRaw = code:module_content(N),
    Methods = unit:get(bts:lookup(PROTOCOLS, N), "Methods"),
    io:fwriteln(Methods),
    io:fwriteln(MethodsRaw),
    rude_contains(MethodsRaw, Method) || Method -> Methods.

load_loaded() -> barley:reparse("pkgs/protocol/test.barley").

main() ->
    prepare(),
    load_loaded(),
    Protocol = protocol:protocol([sum, div]),
    protocol:register(test, Protocol),
    io:fwriteln(extern protocols()),
    protocol:secure(test),
    code:delete(test).
